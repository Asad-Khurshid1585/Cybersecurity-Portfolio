/**
 * Main JavaScript for the Vulnerability Management System
 */

// Global state
let currentVulnerability = null;
let severityChartInstance = null;
let hostChartInstance = null;

// Initialize the application when DOM is fully loaded
document.addEventListener('DOMContentLoaded', () => {
    setupNavigation();
    loadDashboard();
    setupEventListeners();
});

// Setup navigation between sections
function setupNavigation() {
    const navLinks = document.querySelectorAll('.navbar-nav .nav-link');
    navLinks.forEach(link => {
        link.addEventListener('click', (e) => {
            e.preventDefault();
            
            // Remove active class from all links
            navLinks.forEach(l => l.classList.remove('active'));
            
            // Add active class to clicked link
            link.classList.add('active');
            
            // Hide all sections
            const sections = document.querySelectorAll('.section');
            sections.forEach(section => section.classList.remove('active'));
            
            // Show target section
            const targetId = link.getAttribute('href').substring(1);
            document.getElementById(targetId).classList.add('active');
            
            // Load section-specific data
            if (targetId === 'dashboard') {
                loadDashboard();
            } else if (targetId === 'vulnerabilities') {
                loadVulnerabilities();
            }
        });
    });
}

// Setup event listeners for forms and interactions
function setupEventListeners() {
    // Scan form submission
    const scanForm = document.getElementById('scanForm');
    scanForm.addEventListener('submit', (e) => {
        e.preventDefault();
        startScan();
    });
    
    // Severity filter change
    const severityFilter = document.getElementById('severityFilter');
    severityFilter.addEventListener('change', () => {
        loadVulnerabilities(severityFilter.value);
    });
    
    // Show remediation button
    const showRemediationBtn = document.getElementById('showRemediationBtn');
    showRemediationBtn.addEventListener('click', () => {
        if (currentVulnerability) {
            // Navigate to remediation section
            const navLinks = document.querySelectorAll('.navbar-nav .nav-link');
            navLinks.forEach(l => l.classList.remove('active'));
            document.querySelector('.nav-link[href="#remediation"]').classList.add('active');
            
            // Show remediation section
            const sections = document.querySelectorAll('.section');
            sections.forEach(section => section.classList.remove('active'));
            document.getElementById('remediation').classList.add('active');
            
            // Load remediation for the current vulnerability
            loadRemediation(currentVulnerability.cve_id);
            
            // Close the modal
            const vulnDetailModal = bootstrap.Modal.getInstance(document.getElementById('vulnDetailModal'));
            vulnDetailModal.hide();
        }
    });
}

// Load dashboard data and charts
function loadDashboard() {
    fetch('/api/statistics')
        .then(response => response.json())
        .then(data => {
            updateSeverityChart(data.severity_distribution);
            updateHostChart(data.host_distribution);
            // loadRecentScans will be added if time permits
        })
        .catch(error => {
            console.error('Error loading dashboard:', error);
        });
}

// Update the severity distribution chart
function updateSeverityChart(severityData) {
    const ctx = document.getElementById('severityChart').getContext('2d');
    
    // If chart already exists, destroy it first
    if (severityChartInstance) {
        severityChartInstance.destroy();
    }
    
    // Create new chart
    severityChartInstance = new Chart(ctx, {
        type: 'doughnut',
        data: {
            labels: Object.keys(severityData),
            datasets: [{
                data: Object.values(severityData),
                backgroundColor: [
                    '#dc3545', // Critical - Red
                    '#fd7e14', // High - Orange
                    '#ffc107', // Medium - Yellow
                    '#0dcaf0', // Low - Info
                    '#6c757d'  // Unknown - Gray
                ],
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            plugins: {
                legend: {
                    position: 'bottom'
                },
                title: {
                    display: true,
                    text: 'Vulnerabilities by Severity'
                }
            }
        }
    });
}

// Update the host distribution chart
function updateHostChart(hostData) {
    const ctx = document.getElementById('hostChart').getContext('2d');
    
    // If chart already exists, destroy it first
    if (hostChartInstance) {
        hostChartInstance.destroy();
    }
    
    const hosts = Object.keys(hostData).slice(0, 5); // Limit to top 5 hosts
    const counts = hosts.map(host => hostData[host]);
    
    // Create new chart
    hostChartInstance = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: hosts,
            datasets: [{
                label: 'Vulnerabilities',
                data: counts,
                backgroundColor: '#3d8bfd',
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: {
                        precision: 0
                    }
                }
            },
            plugins: {
                title: {
                    display: true,
                    text: 'Top Hosts by Vulnerability Count'
                }
            }
        }
    });
}

// Start a new scan
function startScan() {
    const targets = document.getElementById('targets').value.split(',').map(t => t.trim());
    const scanType = document.getElementById('scanType').value;
    
    if (!targets.length || targets[0] === '') {
        alert('Please enter at least one target.');
        return;
    }
    
    const scanStatus = document.getElementById('scanStatus');
    scanStatus.innerHTML = `<div class="alert alert-info">Starting ${scanType} scan of ${targets.length} targets...</div>`;
    
    fetch('/api/scan', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            targets: targets,
            scan_type: scanType
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.error) {
            scanStatus.innerHTML = `<div class="alert alert-danger">Error: ${data.error}</div>`;
        } else {
            scanStatus.innerHTML = `<div class="alert alert-success">
                Scan completed successfully!<br>
                Found ${data.vulnerabilities_count} potential vulnerabilities.
            </div>`;
            
            loadVulnerabilities();
        }
    })
    .catch(error => {
        console.error('Error starting scan:', error);
        scanStatus.innerHTML = `<div class="alert alert-danger">Error: ${error.message}</div>`;
    });
}

// Load vulnerabilities
function loadVulnerabilities(severity = '') {
    const vulnerabilityList = document.getElementById('vulnerabilityList');
    vulnerabilityList.innerHTML = '<div class="text-center"><div class="spinner-border" role="status"></div><p>Loading vulnerabilities...</p></div>';
    
    let url = '/api/vulnerabilities';
    if (severity) {
        url += `?severity=${severity}`;
    }
    
    fetch(url)
        .then(response => response.json())
        .then(data => {
            if (data.vulnerabilities && data.vulnerabilities.length > 0) {
                vulnerabilityList.innerHTML = '';
                
                data.vulnerabilities.forEach(vuln => {
                    const card = document.createElement('div');
                    card.className = 'card vulnerability-card mb-3';
                    card.innerHTML = `
                        <div class="card-body">
                            <h5 class="card-title">
                                ${vuln.cve_id || 'Unnamed Vulnerability'}
                                <span class="badge severity-${vuln.severity}">${vuln.severity || 'Unknown'}</span>
                            </h5>
                            <p class="card-text">
                                ${vuln.description ? vuln.description.substring(0, 150) + '...' : 'No description available'}
                            </p>
                            <p class="card-text">
                                <small class="text-muted">
                                    Host: ${vuln.host || 'Unknown'} | 
                                    Service: ${vuln.service || 'Unknown'} |
                                    Port: ${vuln.port || 'N/A'}
                                </small>
                            </p>
                        </div>
                    `;
                    
                    card.addEventListener('click', () => {
                        showVulnerabilityDetails(vuln);
                    });
                    
                    vulnerabilityList.appendChild(card);
                });
            } else {
                vulnerabilityList.innerHTML = '<div class="alert alert-info">No vulnerabilities found.</div>';
            }
        })
        .catch(error => {
            console.error('Error loading vulnerabilities:', error);
            vulnerabilityList.innerHTML = `<div class="alert alert-danger">Error loading vulnerabilities: ${error.message}</div>`;
        });
}

// Show vulnerability details in modal
function showVulnerabilityDetails(vulnerability) {
    const vulnDetailContent = document.getElementById('vulnDetailContent');
    currentVulnerability = vulnerability;
    
    vulnDetailContent.innerHTML = `
        <div class="mb-3">
            <h4>${vulnerability.cve_id || 'Unnamed Vulnerability'}</h4>
            <span class="badge severity-${vulnerability.severity}">${vulnerability.severity || 'Unknown'}</span>
        </div>
        <div class="mb-3">
            <h5>Description</h5>
            <p>${vulnerability.description || 'No description available'}</p>
        </div>
        <div class="row mb-3">
            <div class="col-md-4">
                <h5>Host</h5>
                <p>${vulnerability.host || 'Unknown'}</p>
            </div>
            <div class="col-md-4">
                <h5>Service</h5>
                <p>${vulnerability.service || 'Unknown'}</p>
            </div>
            <div class="col-md-4">
                <h5>Port</h5>
                <p>${vulnerability.port || 'N/A'}</p>
            </div>
        </div>
        <div class="mb-3">
            <h5>Source</h5>
            <p>${vulnerability.source || 'Not specified'}</p>
        </div>
    `;
    
    // Show the modal
    const vulnDetailModal = new bootstrap.Modal(document.getElementById('vulnDetailModal'));
    vulnDetailModal.show();
}

// Load remediation for a specific vulnerability
function loadRemediation(vulnerabilityId, method = 'retrieval') {
    // Make sure the remediation section elements exist
    const noVulnSelectedElement = document.getElementById('noVulnSelected');
    const remediationContentElement = document.getElementById('remediationContent');
    const vulnTitleElement = document.getElementById('vulnTitle');
    const remediationStepsElement = document.getElementById('remediationSteps');
    const remediationDescriptionElement = document.getElementById('remediationDescription');
    
    // Check if required elements exist
    if (!noVulnSelectedElement || !remediationContentElement) {
        console.error("Required remediation container elements not found");
        return;
    }
    
    // Hide the "no vulnerability selected" message
    noVulnSelectedElement.style.display = 'none';
    
    // Show loading indicator
    remediationContentElement.innerHTML = '<div class="text-center"><div class="spinner-border" role="status"></div><p>Loading remediation...</p></div>';
    remediationContentElement.style.display = 'block';
    
    // Build the API URL based on method
    let apiUrl = `/api/remediation/${vulnerabilityId}`;
    if (method === 'generative') {
        apiUrl += '/generative';
    }
    
    fetch(apiUrl)
        .then(response => response.json())
        .then(data => {
            if (data.remediation) {
                const remediation = data.remediation;
                
                // Create or update the remediation content
                let remediationContentHtml = `
                    <div class="card mt-4">
                        <div class="card-header">
                            <span id="vulnTitle">${remediation.title || 'Remediation Plan'}</span>
                            <span class="badge ${method === 'generative' ? 'bg-info' : 'bg-primary'} ms-2">
                                ${method === 'generative' ? 'AI Generated' : 'Retrieved'}
                            </span>
                            <button class="btn btn-sm btn-outline-secondary ms-2" onclick="loadRemediation('${vulnerabilityId}', '${method === 'generative' ? 'retrieval' : 'generative'}')">
                                Try ${method === 'generative' ? 'retrieval-based' : 'AI-generated'}
                            </button>
                        </div>
                        <div class="card-body">
                            <h5>Remediation Steps</h5>
                            <ol id="remediationSteps">
                                ${remediation.remediation_steps.map(step => `<li>${step}</li>`).join('')}
                            </ol>
                            
                            <h5 class="mt-4">Additional Information</h5>
                            <p id="remediationDescription">${remediation.description || 'No additional information available.'}</p>
                        </div>
                    </div>
                `;
                
                // Update the content
                remediationContentElement.innerHTML = remediationContentHtml;
                remediationContentElement.style.display = 'block';
                
            } else {
                remediationContentElement.innerHTML = '<div class="alert alert-warning">No remediation suggestions available for this vulnerability.</div>';
                remediationContentElement.style.display = 'block';
            }
        })
        .catch(error => {
            console.error('Error loading remediation:', error);
            remediationContentElement.innerHTML = `<div class="alert alert-danger">Error loading remediation: ${error.message}</div>`;
            remediationContentElement.style.display = 'block';
        });
}
