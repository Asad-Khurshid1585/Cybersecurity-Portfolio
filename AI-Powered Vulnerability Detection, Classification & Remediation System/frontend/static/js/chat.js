/**
 * Chat functionality for the Vulnerability Management System
 * Connects to a local LLM through an API endpoint
 */

document.addEventListener('DOMContentLoaded', () => {
    setupChat();
});

function setupChat() {
    const chatInput = document.getElementById('chatInput');
    const sendMessageBtn = document.getElementById('sendMessageBtn');
    const chatMessages = document.getElementById('chatMessages');

    // Send message when clicking the send button
    sendMessageBtn.addEventListener('click', () => {
        sendChatMessage();
    });

    // Send message when pressing Enter in the input field
    chatInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
            sendChatMessage();
        }
    });

    function sendChatMessage() {
        const message = chatInput.value.trim();
        if (!message) return;

        // Add user message to chat
        addMessageToChat('user', message);
        chatInput.value = '';

        // Show loading indicator
        const loadingId = showLoadingIndicator();

        // Send message to API
        fetch('/api/chat', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                message: message
            })
        })
        .then(response => response.json())
        .then(data => {
            // Remove loading indicator
            removeLoadingIndicator(loadingId);
            
            // Add response to chat
            if (data.error) {
                addMessageToChat('error', `Error: ${data.error}`);
            } else {
                addMessageToChat('system', data.response);
            }
        })
        .catch(error => {
            // Remove loading indicator
            removeLoadingIndicator(loadingId);
            
            // Show error
            addMessageToChat('error', `Failed to send message: ${error.message}`);
        });
    }

    function addMessageToChat(type, content) {
        // Filter out thinking part if present
        if (content && type === 'system') {
            const thinkRegex = /<think>[\s\S]*?<\/think>/g;
            content = content.replace(thinkRegex, '').trim();
        }
        
        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${type}`;
        
        // Format code blocks in the message
        if (content.includes('```')) {
            let formattedContent = '';
            const parts = content.split('```');
            
            for (let i = 0; i < parts.length; i++) {
                if (i % 2 === 0) {
                    // Regular text
                    formattedContent += parts[i];
                } else {
                    // Code block
                    let code = parts[i];
                    const firstLineBreak = code.indexOf('\n');
                    
                    // Extract language if specified
                    let language = '';
                    if (firstLineBreak > 0) {
                        language = code.substring(0, firstLineBreak).trim();
                        code = code.substring(firstLineBreak + 1);
                    }
                    
                    formattedContent += `<pre><code class="language-${language}">${code}</code></pre>`;
                }
            }
            
            messageDiv.innerHTML = formattedContent;
        } else {
            messageDiv.textContent = content;
        }
        
        chatMessages.appendChild(messageDiv);
        
        // Scroll to bottom
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }

    function showLoadingIndicator() {
        const loadingId = Date.now();
        const loadingDiv = document.createElement('div');
        loadingDiv.className = 'message system';
        loadingDiv.id = `loading-${loadingId}`;
        loadingDiv.innerHTML = '<div class="spinner-border spinner-border-sm text-secondary" role="status"></div> Thinking...';
        
        chatMessages.appendChild(loadingDiv);
        chatMessages.scrollTop = chatMessages.scrollHeight;
        
        return loadingId;
    }

    function removeLoadingIndicator(loadingId) {
        const loadingDiv = document.getElementById(`loading-${loadingId}`);
        if (loadingDiv) {
            loadingDiv.remove();
        }
    }
}
