/**
 * Handles remediation data display and error handling
 */

// Initialize the remediation module
const RemediationHandler = {
    /**
     * Load remediation data for a specific vulnerability
     * @param {string} vulnerabilityId - The ID of the vulnerability
     * @param {string} containerId - The ID of the container element for remediation content
     */
    loadRemediation: function(vulnerabilityId, containerId = 'remediation-container') {
        const container = document.getElementById(containerId);
        if (!container) {
            console.error(`Container ${containerId} not found`);
            return;
        }

        // Show loading state
        container.innerHTML = '<div class="loading">Loading remediation data...</div>';

        // Fetch remediation data
        fetch(`/api/remediation/${vulnerabilityId}`)
            .then(response => response.json())
            .then(data => {
                this.displayRemediation(data, container);
            })
            .catch(error => {
                console.error('Error loading remediation:', error);
                this.displayError(container);
            });
    },

    /**
     * Display remediation data in the container
     * @param {Object} data - Remediation data
     * @param {HTMLElement} container - Container element
     */
    displayRemediation: function(data, container) {
        // Ensure container exists
        if (!container) {
            console.error('Container element is null');
            return;
        }

        // Handle possible error states
        if (!data || !data.remediation) {
            this.displayError(container);
            return;
        }

        const remediation = data.remediation;

        // Create content for the container
        let content = `
            <div class="remediation-card">
                <h3 class="remediation-title">${this.safeText(remediation.title)}</h3>
                <p class="remediation-description">${this.safeText(remediation.description)}</p>
                <h4>Remediation Steps:</h4>
                <ol class="remediation-steps">
        `;

        // Add remediation steps
        if (Array.isArray(remediation.remediation_steps) && remediation.remediation_steps.length > 0) {
            remediation.remediation_steps.forEach(step => {
                content += `<li>${this.safeText(step)}</li>`;
            });
        } else {
            content += `<li>No specific steps available. Please research this vulnerability further.</li>`;
        }

        content += `
                </ol>
            </div>
        `;

        container.innerHTML = content;
    },

    /**
     * Display an error message when remediation cannot be loaded
     * @param {HTMLElement} container - Container element
     */
    displayError: function(container) {
        if (!container) {
            console.error('Container element is null');
            return;
        }

        container.innerHTML = `
            <div class="error-card">
                <h3>Remediation Not Available</h3>
                <p>We couldn't load remediation data for this vulnerability. Here are some general steps you can take:</p>
                <ol>
                    <li>Research this vulnerability using its identifier or description</li>
                    <li>Check for available patches or updates from the vendor</li>
                    <li>Consider implementing temporary mitigations</li>
                    <li>Consult with security experts if the vulnerability is critical</li>
                </ol>
            </div>
        `;
    },

    /**
     * Safely handle potentially null or undefined text
     * @param {string} text - Text to display
     * @returns {string} Safe text
     */
    safeText: function(text) {
        if (text === null || text === undefined) {
            return '';
        }
        return String(text)
            .replace(/&/g, '&amp;')
            .replace(/</g, '&lt;')
            .replace(/>/g, '&gt;')
            .replace(/"/g, '&quot;')
            .replace(/'/g, '&#039;');
    }
};

// Make sure the DOM is loaded before we try to attach events
document.addEventListener('DOMContentLoaded', function() {
    // Example of how to use this in your application:
    // RemediationHandler.loadRemediation('CVE-2021-44228');
    
    // You might want to attach handlers to buttons that load remediation details
    const remediationButtons = document.querySelectorAll('.load-remediation');
    if (remediationButtons && remediationButtons.length > 0) {
        remediationButtons.forEach(button => {
            button.addEventListener('click', function() {
                const vulnerabilityId = this.dataset.vulnerabilityId;
                if (vulnerabilityId) {
                    RemediationHandler.loadRemediation(vulnerabilityId);
                }
            });
        });
    }
});
