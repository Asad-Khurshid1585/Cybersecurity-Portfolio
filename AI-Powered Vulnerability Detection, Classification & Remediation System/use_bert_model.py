
"""
Use the BERT model to predict vulnerability severity.
"""

import argparse
import logging
import sys
import os
import json
import torch
from transformers import AutoTokenizer, AutoModelForSequenceClassification

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger(__name__)

def parse_args():
    """Parse command line arguments."""
    parser = argparse.ArgumentParser(description="Use BERT model for prediction")
    parser.add_argument('--model-dir', default='models\severity_bert\\bert_model', help='BERT model directory')
    parser.add_argument('--description', required=True, help='Vulnerability description')
    parser.add_argument('--output-file', help='File to save prediction results')
    return parser.parse_args()

def main():
    """Use BERT model to predict severity."""
    args = parse_args()
    
    model_dir = args.model_dir
    
    if not os.path.exists(model_dir):
        logger.error(f"BERT model directory not found: {model_dir}")
        return 1
        
    try:
        # Load model and tokenizer
        logger.info(f"Loading BERT model from {model_dir}")
        tokenizer = AutoTokenizer.from_pretrained(model_dir)
        model = AutoModelForSequenceClassification.from_pretrained(model_dir)
        
        # Tokenize input
        inputs = tokenizer(
            args.description,
            padding=True,
            truncation=True,
            max_length=512,
            return_tensors="pt"
        )
        
        # Make prediction
        model.eval()
        with torch.no_grad():
            outputs = model(**inputs)
            predictions = torch.argmax(outputs.logits, dim=-1)
        
        # Map to severity levels
        severity_levels = ['Low', 'Medium', 'High', 'Critical']
        prediction = severity_levels[predictions.item()]
        
        logger.info(f"Predicted severity: {prediction}")
        
        if args.output_file:
            with open(args.output_file, 'w') as f:
                json.dump({"severity": prediction, "description": args.description}, f, indent=2)
            logger.info(f"Saved prediction to {args.output_file}")
            
        return 0
        
    except Exception as e:
        logger.error(f"Error using BERT model: {e}")
        return 1

if __name__ == "__main__":
    sys.exit(main())
