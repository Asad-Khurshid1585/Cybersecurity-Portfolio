#!/usr/bin/env python3
"""
Utility script to find and list all trained models in the project.
"""

import os
import sys
import argparse
import logging

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger(__name__)

def find_models(root_dir='.', extensions=None):
    """
    Find all model files in the given directory and its subdirectories.
    
    Args:
        root_dir: Root directory to search
        extensions: List of file extensions to look for, defaults to ['.joblib', '.pkl', '.h5']
    
    Returns:
        List of paths to model files
    """
    if extensions is None:
        extensions = ['.joblib', '.pkl', '.h5', '.model']
    
    model_files = []
    
    # Walk through all directories
    for dirpath, dirnames, filenames in os.walk(root_dir):
        for filename in filenames:
            # Check if the file has one of the model extensions
            if any(filename.endswith(ext) for ext in extensions):
                full_path = os.path.join(dirpath, filename)
                model_files.append(full_path)
    
    return model_files

def parse_args():
    """Parse command line arguments."""
    parser = argparse.ArgumentParser(description="Find trained model files in the project")
    parser.add_argument('--root-dir', default='.', help='Root directory to search')
    parser.add_argument('--extensions', nargs='+', default=['.joblib', '.pkl', '.h5', '.model'], 
                      help='File extensions to consider as models')
    parser.add_argument('--show-size', action='store_true', help='Show file sizes')
    return parser.parse_args()

def main():
    """Find and list all model files."""
    args = parse_args()
    
    logger.info(f"Searching for model files in {os.path.abspath(args.root_dir)}...")
    model_files = find_models(args.root_dir, args.extensions)
    
    if not model_files:
        logger.warning("No model files found!")
        return 1
    
    logger.info(f"Found {len(model_files)} model files:")
    for i, model_path in enumerate(model_files, 1):
        if args.show_size:
            file_size = os.path.getsize(model_path) / (1024 * 1024)  # Size in MB
            logger.info(f"{i}. {model_path} ({file_size:.2f} MB)")
        else:
            logger.info(f"{i}. {model_path}")
    
    return 0

if __name__ == "__main__":
    sys.exit(main())
