#!/usr/bin/env python3
"""
Utility to copy or link models to the expected location for prediction.
"""

import os
import sys
import shutil
import argparse
import logging
import joblib

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger(__name__)

def copy_model(source_path, target_path, create_dir=True):
    """
    Copy a model file to the target location.
    
    Args:
        source_path: Path to the source model file
        target_path: Path where the model should be copied
        create_dir: Whether to create the target directory if it doesn't exist
    
    Returns:
        True if copy was successful, False otherwise
    """
    if not os.path.exists(source_path):
        logger.error(f"Source model {source_path} does not exist")
        return False
    
    # Create target directory if needed
    target_dir = os.path.dirname(target_path)
    if create_dir and not os.path.exists(target_dir):
        os.makedirs(target_dir)
        logger.info(f"Created directory {target_dir}")
    
    # Copy the file
    try:
        shutil.copy2(source_path, target_path)
        logger.info(f"Successfully copied model from {source_path} to {target_path}")
        return True
    except Exception as e:
        logger.error(f"Error copying model: {e}")
        return False

def standardize_model(source_path, target_path, create_dir=True):
    """
    Load a model file and save it in a standardized format at the target location.
    
    Args:
        source_path: Path to the source model file
        target_path: Path where the standardized model should be saved
        create_dir: Whether to create the target directory if it doesn't exist
    
    Returns:
        True if standardization was successful, False otherwise
    """
    if not os.path.exists(source_path):
        logger.error(f"Source model {source_path} does not exist")
        return False
    
    # Create target directory if needed
    target_dir = os.path.dirname(target_path)
    if create_dir and not os.path.exists(target_dir):
        os.makedirs(target_dir)
        logger.info(f"Created directory {target_dir}")
    
    # Try to load the model
    try:
        model_data = joblib.load(source_path)
        
        # Check if model is already in the right format
        if isinstance(model_data, dict) and 'model' in model_data:
            logger.info("Model is already in standardized format")
            standardized_model = model_data
        else:
            # Standardize the model
            logger.info("Converting model to standardized format")
            standardized_model = {
                'model': model_data,
                'feature_names': getattr(model_data, 'feature_names_', None),
                'model_type': 'unknown'
            }
        
        # Save the standardized model
        joblib.dump(standardized_model, target_path)
        logger.info(f"Successfully saved standardized model to {target_path}")
        return True
    except Exception as e:
        logger.error(f"Error standardizing model: {e}")
        return False

def parse_args():
    """Parse command line arguments."""
    parser = argparse.ArgumentParser(description="Copy or standardize model files")
    parser.add_argument('--source', required=True, help='Source model file path')
    parser.add_argument('--target', required=True, help='Target model file path')
    parser.add_argument('--standardize', action='store_true', 
                        help='Standardize model format instead of simple copy')
    return parser.parse_args()

def main():
    """Copy or standardize a model file."""
    args = parse_args()
    
    if args.standardize:
        success = standardize_model(args.source, args.target)
    else:
        success = copy_model(args.source, args.target)
    
    return 0 if success else 1

if __name__ == "__main__":
    sys.exit(main())
