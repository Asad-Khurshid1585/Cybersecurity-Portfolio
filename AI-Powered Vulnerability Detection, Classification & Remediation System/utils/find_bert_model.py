#!/usr/bin/env python3
"""
Utility script to find BERT models in the project.
"""

import os
import sys
import argparse
import logging

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger(__name__)

def find_bert_models(root_dir='.'):
    """
    Find all BERT models in the given directory and its subdirectories.
    Looks for directories containing key BERT model files.
    """
    bert_models = []
    
    # Walk through all directories
    for dirpath, dirnames, filenames in os.walk(root_dir):
        # Check if this directory has BERT model files
        if ('pytorch_model.bin' in filenames and 
            'config.json' in filenames and 
            'tokenizer_config.json' in filenames):
            bert_models.append(dirpath)
    
    return bert_models

def parse_args():
    """Parse command line arguments."""
    parser = argparse.ArgumentParser(description="Find BERT models in the project")
    parser.add_argument('--root-dir', default='.', help='Root directory to search')
    return parser.parse_args()

def main():
    """Find and list all BERT models."""
    args = parse_args()
    
    logger.info(f"Searching for BERT models in {os.path.abspath(args.root_dir)}...")
    bert_models = find_bert_models(args.root_dir)
    
    if not bert_models:
        logger.warning("No BERT models found!")
        return 1
    
    logger.info(f"Found {len(bert_models)} BERT models:")
    for i, model_path in enumerate(bert_models, 1):
        logger.info(f"{i}. {model_path}")
    
    return 0

if __name__ == "__main__":
    sys.exit(main())
