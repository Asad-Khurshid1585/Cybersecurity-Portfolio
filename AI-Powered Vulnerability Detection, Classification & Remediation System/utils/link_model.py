#!/usr/bin/env python3
"""
Utility to copy or link a trained model to the expected location for prediction.
"""

import os
import sys
import shutil
import argparse
import logging
import joblib

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger(__name__)

def copy_model(source_path, target_path):
    """
    Copy a model file to the target location.
    """
    if not os.path.exists(source_path):
        logger.error(f"Source model {source_path} does not exist")
        return False
    
    # Create target directory if needed
    target_dir = os.path.dirname(target_path)
    if not os.path.exists(target_dir):
        os.makedirs(target_dir)
        logger.info(f"Created directory {target_dir}")
    
    # Copy the file
    try:
        shutil.copy2(source_path, target_path)
        logger.info(f"Successfully copied model from {source_path} to {target_path}")
        return True
    except Exception as e:
        logger.error(f"Error copying model: {e}")
        return False

def parse_args():
    """Parse command line arguments."""
    parser = argparse.ArgumentParser(description="Copy a trained model to the expected location")
    parser.add_argument('--source', required=True, help='Path to the source model file')
    parser.add_argument('--target', default='models/severity/severity_classifier.joblib', 
                        help='Target location for the model file')
    return parser.parse_args()

def main():
    """Copy a model file to the expected location."""
    args = parse_args()
    
    if copy_model(args.source, args.target):
        logger.info("Model successfully linked to expected location")
        return 0
    else:
        logger.error("Failed to link model to expected location")
        return 1

if __name__ == "__main__":
    sys.exit(main())
