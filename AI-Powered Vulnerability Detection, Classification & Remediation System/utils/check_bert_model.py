#!/usr/bin/env python3
"""
Utility to check if a BERT model exists and is working properly.
"""

import os
import sys
import argparse
import logging

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger(__name__)

def check_bert_model(model_dir):
    """
    Check if a BERT model exists and can be loaded.
    
    Args:
        model_dir: Path to BERT model directory
        
    Returns:
        True if model can be loaded, False otherwise
    """
    # Check if directory exists
    if not os.path.exists(model_dir):
        logger.error(f"Model directory not found: {model_dir}")
        return False
    
    # Check for essential BERT model files
    required_files = [
        'pytorch_model.bin',
        'config.json',
        'tokenizer_config.json',
        'vocab.txt'
    ]
    
    missing_files = []
    for file in required_files:
        if not os.path.exists(os.path.join(model_dir, file)):
            missing_files.append(file)
    
    if missing_files:
        logger.error(f"Missing required model files: {', '.join(missing_files)}")
        return False
    
    # Try to load the model
    try:
        from transformers import AutoTokenizer, AutoModelForSequenceClassification
        tokenizer = AutoTokenizer.from_pretrained(model_dir)
        model = AutoModelForSequenceClassification.from_pretrained(model_dir)
        
        # Get number of labels
        num_labels = model.num_labels
        logger.info(f"Model loaded successfully. Number of labels: {num_labels}")
        
        return True
    except Exception as e:
        logger.error(f"Error loading BERT model: {e}")
        return False

def parse_args():
    """Parse command line arguments."""
    parser = argparse.ArgumentParser(description="Check BERT model")
    parser.add_argument('--model-dir', default='models/severity_bert/bert_model', 
                        help='Directory containing BERT model')
    return parser.parse_args()

def main():
    """Check if BERT model exists and can be loaded."""
    args = parse_args()
    
    logger.info(f"Checking BERT model at: {args.model_dir}")
    
    if check_bert_model(args.model_dir):
        logger.info("✓ BERT model is valid and can be loaded")
        return 0
    else:
        logger.error("✗ BERT model check failed")
        return 1

if __name__ == "__main__":
    sys.exit(main())
