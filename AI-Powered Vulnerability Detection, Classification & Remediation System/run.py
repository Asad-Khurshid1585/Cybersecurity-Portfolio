#!/usr/bin/env python3
"""
Launcher script for different components of the AI-Driven Vulnerability Management System.
"""

import argparse
import logging
import sys
import os
import json
from pathlib import Path

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("run.log"),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

def setup_environment():
    """Set up environment variables and ensure directories exist."""
    # Ensure required directories exist
    dirs = ['data', 'data/nvd', 'data/scans', 'models', 'results']
    for dir_name in dirs:
        os.makedirs(dir_name, exist_ok=True)
    
    # Add project root to PYTHONPATH
    project_root = Path(__file__).parent
    sys.path.insert(0, str(project_root))

def run_server(args):
    """Run the web server."""
    from api.app import create_app
    
    app = create_app()
    app.run(host=args.host, port=args.port, debug=args.debug)

def run_scan(args):
    """Run a vulnerability scan."""
    from data_collection.scanner_interface import NmapScanner
    
    scanner = NmapScanner()
    results = scanner.scan(args.targets, scan_type=args.scan_type)
    
    if results:
        # Print summary
        print(f"Scan completed: {len(results['hosts'])} hosts scanned")
        print(f"Hosts up: {results['up_hosts']}")
        print(f"Hosts down: {results['down_hosts']}")
        
        # Extract vulnerabilities
        vulnerabilities = scanner.get_vulnerability_report(results)
        print(f"Detected {len(vulnerabilities)} potential vulnerabilities")
        
        # Save results
        if args.output:
            output_path = Path(args.output)
            with open(output_path, 'w') as f:
                json.dump({
                    'results': results,
                    'vulnerabilities': vulnerabilities
                }, f, indent=2)
            print(f"Saved results to {output_path}")
    else:
        print("Scan failed")

def fetch_nvd_data(args):
    """Fetch vulnerability data from NVD."""
    from data_collection.nvd_collector import NVDCollector
    
    collector = NVDCollector(api_key=args.api_key)
    cves = collector.fetch_cves(
        start_date=args.start_date,
        end_date=args.end_date,
        max_results=args.max_results
    )
    
    if cves:
        print(f"Fetched {len(cves)} CVEs")
        
        if args.output:
            output_path = collector.save_cves(cves, filename=args.output)
            print(f"Saved CVEs to {output_path}")
    else:
        print("No CVEs fetched")

def train_classifier(args):
    """Train the vulnerability severity classifier."""
    from models.severity_classifier import VulnerabilitySeverityClassifier
    import json
    
    # Load training data
    if not os.path.exists(args.data_file):
        print(f"Error: Data file {args.data_file} not found")
        return
    
    with open(args.data_file, 'r') as f:
        data = json.load(f)
    
    # Get vulnerabilities from the data
    if 'vulnerabilities' in data:
        vulnerabilities = data['vulnerabilities']
    elif isinstance(data, list):
        vulnerabilities = data
    else:
        print("Error: Unable to extract vulnerabilities from the data file")
        return
    
    print(f"Training with {len(vulnerabilities)} vulnerabilities")
    
    # Train the classifier
    classifier = VulnerabilitySeverityClassifier()
    results = classifier.train(vulnerabilities, test_size=args.test_size)
    
    # Print results
    for model_name, metrics in results.items():
        print(f"\nResults for {model_name}:")
        print(f"Accuracy: {metrics['accuracy']:.4f}")
        print(f"F1 Score: {metrics['f1']:.4f}")
        print("Best parameters:", metrics['best_params'])

def generate_remediation(args):
    """Generate remediation suggestions for a vulnerability."""
    from models.remediation_generator import RemediationGenerator
    
    # Create vulnerability from arguments
    vulnerability = {
        'description': args.description,
        'cve_id': args.cve_id,
        'service': args.service,
        'port': args.port
    }
    
    # Generate remediation suggestion
    generator = RemediationGenerator()
    remediation = generator.get_remediation_suggestion(vulnerability)
    
    # Print remediation
    print(f"\nRemediation: {remediation['title']}")
    print(f"\nDescription: {remediation['description']}")
    print("\nSteps:")
    for i, step in enumerate(remediation['remediation_steps'], 1):
        print(f"{i}. {step}")

def parse_args():
    """Parse command line arguments."""
    parser = argparse.ArgumentParser(
        description='AI-Driven Vulnerability Prioritization and Remediation System'
    )
    
    subparsers = parser.add_subparsers(dest='command', help='Command to run')
    
    # Server command
    server_parser = subparsers.add_parser('server', help='Run the web server')
    server_parser.add_argument('--host', default='0.0.0.0', help='Host to run the server on')
    server_parser.add_argument('--port', type=int, default=5000, help='Port to run the server on')
    server_parser.add_argument('--debug', action='store_true', help='Run in debug mode')
    
    # Scan command
    scan_parser = subparsers.add_parser('scan', help='Run a vulnerability scan')
    scan_parser.add_argument('targets', nargs='+', help='Target IP addresses or hostnames')
    scan_parser.add_argument('--scan-type', default='basic', choices=['basic', 'full', 'vuln', 'os', 'service'],
                           help='Type of scan to perform')
    scan_parser.add_argument('--output', help='Output file for scan results (JSON)')
    
    # NVD command
    nvd_parser = subparsers.add_parser('nvd', help='Fetch vulnerability data from NVD')
    nvd_parser.add_argument('--api-key', help='NVD API key')
    nvd_parser.add_argument('--start-date', help='Start date in YYYY-MM-DD format')
    nvd_parser.add_argument('--end-date', help='End date in YYYY-MM-DD format')
    nvd_parser.add_argument('--max-results', type=int, default=1000, help='Maximum number of results')
    nvd_parser.add_argument('--output', help='Output file for CVE data (JSON)')
    
    # Train command
    train_parser = subparsers.add_parser('train', help='Train the vulnerability severity classifier')
    train_parser.add_argument('--data-file', required=True, help='JSON file with training data')
    train_parser.add_argument('--test-size', type=float, default=0.2, help='Proportion of data for testing')
    
    # Remediate command
    remediate_parser = subparsers.add_parser('remediate', help='Generate remediation suggestions')
    remediate_parser.add_argument('--description', required=True, help='Vulnerability description')
    remediate_parser.add_argument('--cve-id', help='CVE ID')
    remediate_parser.add_argument('--service', help='Affected service')
    remediate_parser.add_argument('--port', help='Affected port')
    
    return parser.parse_args()

def main():
    """Main entry point."""
    setup_environment()
    
    args = parse_args()
    
    if args.command == 'server':
        run_server(args)
    elif args.command == 'scan':
        run_scan(args)
    elif args.command == 'nvd':
        fetch_nvd_data(args)
    elif args.command == 'train':
        train_classifier(args)
    elif args.command == 'remediate':
        generate_remediation(args)
    else:
        logger.error("No command specified. Use --help for options.")
        sys.exit(1)

if __name__ == "__main__":
    main()
